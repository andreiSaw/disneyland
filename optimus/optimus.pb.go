// Code generated by protoc-gen-go. DO NOT EDIT.
// source: optimus.proto

/*
Package optimus is a generated protocol buffer package.

It is generated from these files:
	optimus.proto

It has these top-level messages:
	Job
	ListOfJobs
	RequestWithId
	ListJobsRequest
*/
package optimus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Job_Status int32

const (
	Job_PENDING   Job_Status = 0
	Job_PULLED    Job_Status = 1
	Job_RUNNING   Job_Status = 2
	Job_FAILED    Job_Status = 3
	Job_COMPLETED Job_Status = 4
)

var Job_Status_name = map[int32]string{
	0: "PENDING",
	1: "PULLED",
	2: "RUNNING",
	3: "FAILED",
	4: "COMPLETED",
}
var Job_Status_value = map[string]int32{
	"PENDING":   0,
	"PULLED":    1,
	"RUNNING":   2,
	"FAILED":    3,
	"COMPLETED": 4,
}

func (x Job_Status) String() string {
	return proto.EnumName(Job_Status_name, int32(x))
}
func (Job_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Job_Kind int32

const (
	Job_POINT Job_Kind = 0
	Job_DJOB  Job_Kind = 1
	Job_ETC   Job_Kind = 2
)

var Job_Kind_name = map[int32]string{
	0: "POINT",
	1: "DJOB",
	2: "ETC",
}
var Job_Kind_value = map[string]int32{
	"POINT": 0,
	"DJOB":  1,
	"ETC":   2,
}

func (x Job_Kind) String() string {
	return proto.EnumName(Job_Kind_name, int32(x))
}
func (Job_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Job struct {
	Project     string     `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	Id          uint64     `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Status      Job_Status `protobuf:"varint,3,opt,name=status,enum=Job_Status" json:"status,omitempty"`
	Coordinate  string     `protobuf:"bytes,4,opt,name=coordinate" json:"coordinate,omitempty"`
	MetricValue string     `protobuf:"bytes,5,opt,name=metric_value,json=metricValue" json:"metric_value,omitempty"`
	Metadata    string     `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
	Input       string     `protobuf:"bytes,7,opt,name=input" json:"input,omitempty"`
	Output      string     `protobuf:"bytes,8,opt,name=output" json:"output,omitempty"`
	Kind        Job_Kind   `protobuf:"varint,9,opt,name=kind,enum=Job_Kind" json:"kind,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Job) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Job) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Job) GetStatus() Job_Status {
	if m != nil {
		return m.Status
	}
	return Job_PENDING
}

func (m *Job) GetCoordinate() string {
	if m != nil {
		return m.Coordinate
	}
	return ""
}

func (m *Job) GetMetricValue() string {
	if m != nil {
		return m.MetricValue
	}
	return ""
}

func (m *Job) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Job) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *Job) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Job) GetKind() Job_Kind {
	if m != nil {
		return m.Kind
	}
	return Job_POINT
}

type ListOfJobs struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *ListOfJobs) Reset()                    { *m = ListOfJobs{} }
func (m *ListOfJobs) String() string            { return proto.CompactTextString(m) }
func (*ListOfJobs) ProtoMessage()               {}
func (*ListOfJobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListOfJobs) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type RequestWithId struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestWithId) Reset()                    { *m = RequestWithId{} }
func (m *RequestWithId) String() string            { return proto.CompactTextString(m) }
func (*RequestWithId) ProtoMessage()               {}
func (*RequestWithId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestWithId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListJobsRequest struct {
	HowMany uint32 `protobuf:"varint,1,opt,name=how_many,json=howMany" json:"how_many,omitempty"`
}

func (m *ListJobsRequest) Reset()                    { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()               {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListJobsRequest) GetHowMany() uint32 {
	if m != nil {
		return m.HowMany
	}
	return 0
}

func init() {
	proto.RegisterType((*Job)(nil), "Job")
	proto.RegisterType((*ListOfJobs)(nil), "ListOfJobs")
	proto.RegisterType((*RequestWithId)(nil), "RequestWithId")
	proto.RegisterType((*ListJobsRequest)(nil), "ListJobsRequest")
	proto.RegisterEnum("Job_Status", Job_Status_name, Job_Status_value)
	proto.RegisterEnum("Job_Kind", Job_Kind_name, Job_Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Optimus service

type OptimusClient interface {
	CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	CreateMultipleJobs(ctx context.Context, in *ListOfJobs, opts ...grpc.CallOption) (*ListOfJobs, error)
	GetJob(ctx context.Context, in *RequestWithId, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error)
	ModifyJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	PullPendingJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error)
}

type optimusClient struct {
	cc *grpc.ClientConn
}

func NewOptimusClient(cc *grpc.ClientConn) OptimusClient {
	return &optimusClient{cc}
}

func (c *optimusClient) CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/Optimus/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimusClient) CreateMultipleJobs(ctx context.Context, in *ListOfJobs, opts ...grpc.CallOption) (*ListOfJobs, error) {
	out := new(ListOfJobs)
	err := grpc.Invoke(ctx, "/Optimus/CreateMultipleJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimusClient) GetJob(ctx context.Context, in *RequestWithId, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/Optimus/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimusClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error) {
	out := new(ListOfJobs)
	err := grpc.Invoke(ctx, "/Optimus/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimusClient) ModifyJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/Optimus/ModifyJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optimusClient) PullPendingJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListOfJobs, error) {
	out := new(ListOfJobs)
	err := grpc.Invoke(ctx, "/Optimus/PullPendingJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Optimus service

type OptimusServer interface {
	CreateJob(context.Context, *Job) (*Job, error)
	CreateMultipleJobs(context.Context, *ListOfJobs) (*ListOfJobs, error)
	GetJob(context.Context, *RequestWithId) (*Job, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListOfJobs, error)
	ModifyJob(context.Context, *Job) (*Job, error)
	PullPendingJobs(context.Context, *ListJobsRequest) (*ListOfJobs, error)
}

func RegisterOptimusServer(s *grpc.Server, srv OptimusServer) {
	s.RegisterService(&_Optimus_serviceDesc, srv)
}

func _Optimus_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimusServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Optimus/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimusServer).CreateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Optimus_CreateMultipleJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOfJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimusServer).CreateMultipleJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Optimus/CreateMultipleJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimusServer).CreateMultipleJobs(ctx, req.(*ListOfJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Optimus_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimusServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Optimus/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimusServer).GetJob(ctx, req.(*RequestWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Optimus_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimusServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Optimus/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimusServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Optimus_ModifyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimusServer).ModifyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Optimus/ModifyJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimusServer).ModifyJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Optimus_PullPendingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimusServer).PullPendingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Optimus/PullPendingJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimusServer).PullPendingJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Optimus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Optimus",
	HandlerType: (*OptimusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _Optimus_CreateJob_Handler,
		},
		{
			MethodName: "CreateMultipleJobs",
			Handler:    _Optimus_CreateMultipleJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Optimus_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _Optimus_ListJobs_Handler,
		},
		{
			MethodName: "ModifyJob",
			Handler:    _Optimus_ModifyJob_Handler,
		},
		{
			MethodName: "PullPendingJobs",
			Handler:    _Optimus_PullPendingJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "optimus.proto",
}

func init() { proto.RegisterFile("optimus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x8e, 0xd2, 0x40,
	0x18, 0x85, 0x69, 0x29, 0x2d, 0xfd, 0x11, 0xb6, 0xf9, 0x63, 0xcc, 0x40, 0xa2, 0x62, 0x35, 0x86,
	0x44, 0xd3, 0x18, 0x7c, 0x02, 0x05, 0xdc, 0x80, 0x40, 0x9b, 0xca, 0xea, 0xe5, 0xa6, 0xa5, 0xb3,
	0x32, 0x6b, 0xe9, 0xd4, 0x76, 0xea, 0x86, 0xc7, 0x36, 0xf1, 0x01, 0xcc, 0x4c, 0x61, 0x5d, 0xd7,
	0x1b, 0x6f, 0x9a, 0x9c, 0x73, 0xfe, 0x9c, 0x7e, 0xc9, 0x19, 0xe8, 0xf2, 0x5c, 0xb0, 0x7d, 0x55,
	0x7a, 0x79, 0xc1, 0x05, 0x77, 0x7f, 0xea, 0xd0, 0x5c, 0xf0, 0x18, 0x09, 0x58, 0x79, 0xc1, 0xaf,
	0xe9, 0x56, 0x10, 0x6d, 0xa8, 0x8d, 0xec, 0xf0, 0x24, 0xb1, 0x07, 0x3a, 0x4b, 0x88, 0x3e, 0xd4,
	0x46, 0x46, 0xa8, 0xb3, 0x04, 0x9f, 0x83, 0x59, 0x8a, 0x48, 0x54, 0x25, 0x69, 0x0e, 0xb5, 0x51,
	0x6f, 0xdc, 0xf1, 0x16, 0x3c, 0xf6, 0x3e, 0x29, 0x2b, 0x3c, 0x46, 0xf8, 0x04, 0x60, 0xcb, 0x79,
	0x91, 0xb0, 0x2c, 0x12, 0x94, 0x18, 0xaa, 0xf1, 0x8e, 0x83, 0xcf, 0xe0, 0xc1, 0x9e, 0x8a, 0x82,
	0x6d, 0x2f, 0x7f, 0x44, 0x69, 0x45, 0x49, 0x4b, 0x5d, 0x74, 0x6a, 0xef, 0xb3, 0xb4, 0x70, 0x00,
	0xed, 0x3d, 0x15, 0x51, 0x12, 0x89, 0x88, 0x98, 0x2a, 0xbe, 0xd5, 0xf8, 0x10, 0x5a, 0x2c, 0xcb,
	0x2b, 0x41, 0x2c, 0x15, 0xd4, 0x02, 0x1f, 0x81, 0xc9, 0x2b, 0x21, 0xed, 0xb6, 0xb2, 0x8f, 0x0a,
	0x1f, 0x83, 0xf1, 0x8d, 0x65, 0x09, 0xb1, 0x15, 0xaf, 0xad, 0x78, 0x3f, 0xb2, 0x2c, 0x09, 0x95,
	0xed, 0xce, 0xc1, 0xac, 0xe9, 0xb1, 0x03, 0x56, 0x30, 0x5b, 0x4f, 0xe7, 0xeb, 0x73, 0xa7, 0x81,
	0x00, 0x66, 0x70, 0xb1, 0x5c, 0xce, 0xa6, 0x8e, 0x26, 0x83, 0xf0, 0x62, 0xbd, 0x96, 0x81, 0x2e,
	0x83, 0x0f, 0xef, 0xe6, 0x32, 0x68, 0x62, 0x17, 0xec, 0x89, 0xbf, 0x0a, 0x96, 0xb3, 0xcd, 0x6c,
	0xea, 0x18, 0xee, 0x0b, 0x30, 0x64, 0x31, 0xda, 0xd0, 0x0a, 0xfc, 0xf9, 0x7a, 0xe3, 0x34, 0xb0,
	0x0d, 0xc6, 0x74, 0xe1, 0xbf, 0x77, 0x34, 0xb4, 0xa0, 0x39, 0xdb, 0x4c, 0x1c, 0xdd, 0x7d, 0x09,
	0xb0, 0x64, 0xa5, 0xf0, 0xaf, 0x16, 0x3c, 0x2e, 0x91, 0x80, 0x71, 0xcd, 0xe3, 0x92, 0x68, 0xc3,
	0xe6, 0xa8, 0x33, 0x36, 0x24, 0x5d, 0xa8, 0x1c, 0xf7, 0x29, 0x74, 0x43, 0xfa, 0xbd, 0xa2, 0xa5,
	0xf8, 0xc2, 0xc4, 0x6e, 0x9e, 0x1c, 0xa7, 0xd0, 0x4e, 0x53, 0xb8, 0xaf, 0xe1, 0x4c, 0x16, 0xc9,
	0x9a, 0xe3, 0x21, 0xf6, 0xa1, 0xbd, 0xe3, 0x37, 0x97, 0xfb, 0x28, 0x3b, 0xa8, 0xc3, 0x6e, 0x68,
	0xed, 0xf8, 0xcd, 0x2a, 0xca, 0x0e, 0xe3, 0x5f, 0x1a, 0x58, 0x7e, 0x3d, 0x3e, 0xf6, 0xc1, 0x9e,
	0x14, 0x34, 0x12, 0x54, 0x6e, 0xaf, 0xfe, 0x39, 0x50, 0x5f, 0xb7, 0x81, 0x6f, 0x00, 0xeb, 0x68,
	0x55, 0xa5, 0x82, 0xe5, 0x29, 0x55, 0x94, 0x1d, 0xef, 0x0f, 0xf2, 0xe0, 0xae, 0x70, 0x1b, 0x38,
	0x04, 0xf3, 0x9c, 0x4a, 0x0a, 0xec, 0x79, 0x7f, 0x01, 0xdf, 0x76, 0xbe, 0x82, 0xf6, 0x09, 0x14,
	0x1d, 0xef, 0x1e, 0xf3, 0xfd, 0xba, 0x3e, 0xd8, 0x2b, 0x9e, 0xb0, 0xab, 0xc3, 0xbf, 0x6c, 0x63,
	0x38, 0x0b, 0xaa, 0x34, 0x0d, 0x68, 0x96, 0xb0, 0xec, 0xeb, 0x7f, 0xd5, 0xc5, 0xa6, 0x7a, 0xe8,
	0x6f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xac, 0x76, 0xdd, 0x57, 0xf9, 0x02, 0x00, 0x00,
}
